import type { ChildProcess } from 'node:child_process'
import { spawn } from 'node:child_process'
import process from 'node:process'

console.log('üöÄ Starting UI Differ development in sequential mode...\n')

// ÂêØÂä® core ÂåÖÁöÑ dev Ê®°Âºè
console.log('üì¶ Step 1: Starting Core Library...')
const coreProcess = spawn('pnpm', ['dev:core'], {
  stdio: 'inherit',
  shell: true,
  cwd: process.cwd(),
})

const webTesterProcess = spawn('pnpm', ['dev:web-tester'], {
  stdio: 'inherit',
  shell: true,
  cwd: process.cwd(),
})

// Á≠âÂæÖ core ÂåÖÂêØÂä®ÂÆåÊàêÔºàÁõëÂê¨ÊûÑÂª∫ÂÆåÊàê‰ø°ÊÅØÔºâ
setTimeout(() => {
  console.log('\nüîÑ Step 2: Core library is building, starting plugins...\n')

  // ÂêØÂä® Chrome Êèí‰ª∂
  console.log('üåê Starting Chrome Plugin...')
  const chromeProcess = spawn('pnpm', ['dev:chrome'], {
    stdio: 'inherit',
    shell: true,
    cwd: process.cwd(),
  })

  // ÂêØÂä® MasterGo Êèí‰ª∂
  console.log('üé® Starting MasterGo Plugin...')
  const mastergoProcess = spawn('pnpm', ['dev:mastergo'], {
    stdio: 'inherit',
    shell: true,
    cwd: process.cwd(),
  })

  // Â§ÑÁêÜËøõÁ®ãÈÄÄÂá∫
  const processes: ChildProcess[] = [coreProcess, webTesterProcess, chromeProcess, mastergoProcess]

  // ÂΩì‰ªª‰Ωï‰∏Ä‰∏™ËøõÁ®ãÈÄÄÂá∫Êó∂ÔºåÁªàÊ≠¢ÊâÄÊúâËøõÁ®ã
  processes.forEach((proc) => {
    proc.on('exit', (code, signal) => {
      console.log(`\n‚ö†Ô∏è Process exited with code ${code} and signal ${signal}`)
      console.log('üõë Terminating all development processes...')

      processes.forEach((p) => {
        if (!p.killed) {
          p.kill('SIGTERM')
        }
      })

      process.exit(code || 0)
    })
  })

  // Â§ÑÁêÜ Ctrl+C ‰ø°Âè∑
  process.on('SIGINT', () => {
    console.log('\n\nüõë Received SIGINT, terminating all processes...')
    processes.forEach((proc) => {
      if (!proc.killed) {
        proc.kill('SIGTERM')
      }
    })
    process.exit(0)
  })
}, 3000) // Á≠âÂæÖ 3 ÁßíËÆ© core ÂåÖÂºÄÂßãÊûÑÂª∫

// Â§ÑÁêÜ core ËøõÁ®ãÂºÇÂ∏∏ÈÄÄÂá∫
coreProcess.on('exit', (code) => {
  if (code !== 0) {
    console.error('‚ùå Core library failed to start')
    process.exit(1)
  }
})
