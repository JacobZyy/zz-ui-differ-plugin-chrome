---
description: 
globs: *.jsx,*.tsx
alwaysApply: false
---
# React 规则

## AI代码生成标识强制规范
- 所有由 AI 生成或修改的代码块，包括但不限于聊天、代码片段、代码示例、代码建议、推荐写法等等，都必须在代码前添加如下注释： // generated by ai
- 如果仅修改部分代码，需要在修改处加注释
- 如果是一个文件内多处生成代码块或多处修改代码，需要在每一处的前加注释。
- 连续的代码行，不要每行都加，在代码块前加注释，避免注释密度太大。
- 这条注释必须单独一行，不要和其他注释生成在一行内
- 该规则始终生效，适用于所有 AI 生成方式（chat、command+k、tab 补全、自动生成等），无论输出场景为何。


## 文件命名规范

### 组件文件命名
- 使用 PascalCase 命名组件文件
- 页面组件以 `Page` 结尾
- 基础组件以 `Base` 开头
- 高阶组件以 `with` 开头
- 紧密耦合的组件以父组件名作为前缀

### 目录结构
- 页面组件放在 `src/pages` 目录下
- 公共组件放在 `src/components` 目录下
- 布局组件放在 `src/layouts` 目录下
- 工具函数放在 `src/utils` 目录下
- API 接口放在 `src/services` 目录下

## 组件开发规范
### Props 定义
- 使用 TypeScript 接口定义 Props
- 必须指定类型
- 使用 camelCase 命名
- 可选属性使用 `?` 标记
- 使用 children 属性传递子组件

### 状态管理
- 使用 useState 管理组件内部状态
- 使用 useReducer 管理复杂状态
- 使用 Context 管理全局状态
- 使用 Redux/Mobx 管理应用状态

### 样式规范
- **必须使用 CSS Modules 形式**，文件命名为 `ComponentName.module.scss`
- 使用 BEM 命名规范
- 避免使用内联样式
- 使用变量管理主题
- 样式文件与组件文件放在同一目录下

## 代码风格

### JSX
- 组件名使用 PascalCase
- 属性名使用 camelCase
- 使用自闭合标签
- 使用条件渲染代替三元运算符
- 使用 Fragment 包裹多个元素

### Hooks 使用规范
- 只在最顶层使用 Hooks
- 只在函数组件中使用 Hooks
- 自定义 Hook 以 use 开头
- 使用 useCallback 和 useMemo 优化性能
- 使用 useEffect 处理副作用

### TypeScript
- 使用类型注解
- 使用接口定义数据结构
- 使用泛型增加代码复用性
- 使用类型断言谨慎处理

### 注释规范
- 组件必须包含功能说明
- 复杂逻辑必须添加注释
- 使用 JSDoc 注释格式
- 关键算法需要详细注释

## 性能优化

### 代码层面
- 使用 React.memo 优化渲染
- 使用 useMemo 缓存计算结果
- 使用 useCallback 缓存函数
- 使用虚拟列表处理长列表
- 使用懒加载优化首屏加载

### 资源优化
- 图片资源压缩
- 使用懒加载
- 合理使用 CDN
- 代码分割
- 使用 Tree Shaking
